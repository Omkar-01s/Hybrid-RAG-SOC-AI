import os
import datetime
from pathlib import Path
from markdown2 import markdown
from fpdf import FPDF

# Ensure output folder exists
OUTPUT_DIR = Path("output/generated_reports")
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# Create readable filename
def generate_filename(alert_type, fmt="md"):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"{timestamp}_{alert_type.replace(' ', '_').lower()}.{fmt}"
    return OUTPUT_DIR / filename

# Save Markdown report
def save_markdown(alert, summary, escalation_level):
    report_text = f"""
# üõ°Ô∏è SOC Incident Report

**Alert Type:** {alert.get('type', 'Unknown')}
**Source IP:** {alert.get('source_ip', 'N/A')}
**Timestamp:** {alert.get('timestamp', 'N/A')}
**Escalation Level:** {escalation_level}

---

## üîî Alert Description
{alert.get('description', '')}

---

## üìã Generated Summary
{summary}

---

## ‚úÖ Action Taken
Escalation Level: **{escalation_level}**

---

*Generated by AI-based Security Playbook System*
"""

    filepath = generate_filename(alert.get("type", "incident"), fmt="md")
    with open(filepath, "w") as f:
        f.write(report_text.strip())
    return filepath

# Optional PDF generation using fpdf
def convert_markdown_to_pdf(markdown_path):
    with open(markdown_path, "r") as f:
        text = f.read()

    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", size=12)

    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)

    pdf_path = markdown_path.with_suffix(".pdf")
    pdf.output(str(pdf_path))
    return pdf_path

# Wrapper to generate + save report
def generate_report(alert, summary, escalation="Handle_Locally", to_pdf=False):
    md_path = save_markdown(alert, summary, escalation)
    if to_pdf:
        pdf_path = convert_markdown_to_pdf(md_path)
        return pdf_path
    return md_path
